# OpenAPI-versjonen som brukes. 3.0.3 er en stabil og utbredt versjon.
openapi: 3.0.3

# ---------------------------------------------------------------------------
#  1. GENEREL INFORMASJON
#  Dette er metadata om API-et.
# ---------------------------------------------------------------------------
info:
  title: MindMesh API V2
  description: |-
    API for MindMesh V2, en server for å lagre og organisere markdown-baserte dokumenter i arkiver.
    Denne versjonen introduserer brukerautentisering med JWT og rollebasert tilgangskontroll.
  version: 2.0.0

# ---------------------------------------------------------------------------
#  2. SERVERE
#  Her defineres base-URL-ene til API-et.
# ---------------------------------------------------------------------------
servers:
  - url: https://server.mindmesh.no/
    description: Produksjonsserveren i Azure.
  - url: http://localhost:7071/
    description: Lokal utviklingsserver som kjøres med `func start`. Port kan variere.

# ---------------------------------------------------------------------------
#  3. TAGS
#  Tags brukes for å gruppere endepunkter i dokumentasjonen.
# ---------------------------------------------------------------------------
tags:
  - name: Brukerhåndtering
    description: Endepunkter for å registrere og logge inn brukere.
  - name: Arkivhåndtering
    description: Opprette og liste arkiver, samt administrere medlemmer.
  - name: Dokumenthåndtering
    description: Alle operasjoner relatert til dokumenter og deres innhold.

# ---------------------------------------------------------------------------
#  4. SIKKERHET
#  Her definerer vi hvordan API-et sikres. V2 bruker JWT Bearer tokens.
# ---------------------------------------------------------------------------
components:
  securitySchemes:
    bearerAuth: # Navnet vi gir til sikkerhetsmetoden.
      type: http
      scheme: bearer
      bearerFormat: JWT # Hint til verktøy om at det er et JWT-token.
      description: >
        Logg inn via `/users/login` for å motta et JWT-token.
        Send tokenet i `Authorization`-headeren på formatet `Bearer <token>`.

# Standard sikkerhetskrav for alle endepunkter.
# Dette kan overstyres per endepunkt (f.eks. for /login som er offentlig).
security:
  - bearerAuth: []

# ---------------------------------------------------------------------------
#  5. GJENBRUKBARE KOMPONENTER (SCHEMAS)
#  Her definerer vi alle datamodellene for å unngå repetisjon.
# ---------------------------------------------------------------------------
components:
  schemas:
    # --- Request Bodies ---
    UserRegister:
      type: object
      properties:
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          example: "sterkt-passord-123"
        displayName:
          type: string
          example: "Test Bruker"
      required: [email, password]

    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          example: "sterkt-passord-123"
      required: [email, password]

    MemberAdd:
      type: object
      properties:
        email:
          type: string
          format: email
          description: E-posten til brukeren som skal legges til.
          example: "ny.bruker@example.com"
        role:
          type: string
          description: Rollen brukeren skal ha.
          enum: [editor, viewer]
          default: editor
      required: [email]

    DocumentInsert:
      type: object
      properties:
        name:
          type: string
          description: "Navn på dokumentet, kan inkludere undermapper (f.eks. 'mappe/mitt_dokument')."
          example: "Prosjekt X/Idéer"
        path:
          type: string
          description: "Valgfri rotmappe for dokumentet."
          example: "Arbeid"
        body:
          type: string
          description: "Innholdet i dokumentet (Markdown)."
          example: "Dette er et nytt dokument med en [[lenke]] til et annet."
      required: [name, body]

    DocumentRename:
      type: object
      properties:
        oldFullname:
          type: string
          example: "Gammelt Mappenavn/Gammelt Dokumentnavn.kli"
        newFullname:
          type: string
          example: "Nytt Mappenavn/Nytt Dokumentnavn.kli"
      required: [oldFullname, newFullname]

    # --- Response Bodies ---
    TokenResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    ArchiveList:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            example: "Mitt Første Arkiv"
          owner:
            type: string
            format: email
            example: "eier@example.com"

    Document:
      type: object
      properties:
        id: { type: string }
        archive: { type: string }
        fullname: { type: string }
        name: { type: string }
        path: { type: string }
        body: { type: string }
        lastupdated: { type: string, format: date-time }
        updatedby: { type: string, format: uuid }
        timestamp: { type: string, format: date-time }
        incominglinks: { type: string }

    DocumentSummaryList:
      type: array
      items:
        type: object
        properties:
          name: { type: string, example: "Dokument.kli" }
          path: { type: string, example: "Mappe" }
          lastupdated: { type: string, format: date-time }
          updatedby: { type: string, format: uuid }
          timestamp: { type: string, format: date-time }

    Graph:
      type: object
      properties:
        nodes:
          type: array
          items:
            type: string
            example: "Mappe/Dokument.kli"
        edges:
          type: array
          items:
            type: object
            properties:
              source:
                type: string
                example: "Mappe/Dokument.kli"
              target:
                type: string
                example: "Et Annet Dokument.kli"

    Error:
      type: object
      properties:
        error:
          type: string

# ---------------------------------------------------------------------------
#  6. ENDEPUNKTER (PATHS)
#  Den faktiske definisjonen av hvert API-kall.
# ---------------------------------------------------------------------------
paths:
  # --- Brukerhåndtering ---
  /users/register:
    post:
      tags: [Brukerhåndtering]
      summary: Registrer en ny bruker
      security: [] # Offentlig endepunkt, ingen autentisering kreves.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201': { description: "Bruker ble opprettet." }
        '400': { description: "Ugyldig input.", content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '409': { description: "E-posten er allerede registrert.", content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}

  /users/login:
    post:
      tags: [Brukerhåndtering]
      summary: Logg inn og motta et JWT-token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: "Vellykket innlogging."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401': { description: "Ugyldig brukernavn eller passord.", content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}

  # --- Arkivhåndtering ---
  /create_archive:
    post:
      tags: [Arkivhåndtering]
      summary: Opprett et nytt arkiv
      parameters:
        - name: Archive
          in: header
          required: true
          schema: { type: string }
          description: Navnet på arkivet som skal opprettes.
      responses:
        '201': { description: "Arkivet ble opprettet." }
        '401': { description: "Ugyldig eller manglende token." }
        '409': { description: "Arkiv med dette navnet finnes allerede." }

  /list_archives:
    get:
      tags: [Arkivhåndtering]
      summary: List alle arkiver brukeren er medlem av
      responses:
        '200':
          description: "En liste over brukerens arkiver."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveList'
        '401': { description: "Ugyldig eller manglende token." }

  /archives/{archive_name}/members:
    post:
      tags: [Arkivhåndtering]
      summary: Legg til en bruker i et arkiv
      description: Kun eieren av arkivet kan utføre denne handlingen.
      parameters:
        - name: archive_name
          in: path
          required: true
          schema: { type: string }
          description: Navnet på arkivet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberAdd'
      responses:
        '200': { description: "Brukeren ble lagt til." }
        '401': { description: "Ugyldig eller manglende token." }
        '403': { description: "Kun eier kan legge til medlemmer." }
        '404': { description: "Brukeren som skal legges til ble ikke funnet." }
        '409': { description: "Brukeren er allerede medlem." }

  # --- Dokumenthåndtering ---
  /insert:
    post:
      tags: [Dokumenthåndtering]
      summary: Opprett eller oppdater et dokument
      parameters:
        - name: Archive
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentInsert'
      responses:
        '200': { description: "Dokumentet ble lagret." }
        '401': { description: "Ugyldig token." }
        '403': { description: "Mangler skriverettigheter til arkivet." }

  /retrieve:
    get:
      tags: [Dokumenthåndtering]
      summary: Hent et spesifikt dokument
      parameters:
        - name: Archive
          in: header
          required: true
          schema: { type: string }
        - name: fullname
          in: query
          required: true
          schema: { type: string }
          description: "Fullt navn på dokumentet (inkl. sti)."
      responses:
        '200':
          description: "Dokumentets innhold."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '401': { description: "Ugyldig token." }
        '403': { description: "Mangler leserettigheter til arkivet." }
        '404': { description: "Dokumentet ble ikke funnet." }

  /documents:
    get:
      tags: [Dokumenthåndtering]
      summary: List opp alle dokumenter i et arkiv
      parameters:
        - name: Archive
          in: header
          required: true
          schema: { type: string }
        - name: sincetimestamp
          in: query
          required: false
          schema: { type: string, format: date-time }
          description: "Valgfritt. Hent kun dokumenter oppdatert etter dette tidspunktet (ISO 8601)."
      responses:
        '200':
          description: "En liste med metadata for dokumentene."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentSummaryList'
        '401': { description: "Ugyldig token." }
        '403': { description: "Mangler leserettigheter til arkivet." }

  /rename_document:
    post:
      tags: [Dokumenthåndtering]
      summary: Endre navn på et dokument (og alle lenker til det)
      parameters:
        - name: Archive
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentRename'
      responses:
        '200': { description: "Navneendring var vellykket." }
        '401': { description: "Ugyldig token." }
        '403': { description: "Mangler skriverettigheter til arkivet." }
        '404': { description: "Det gamle dokumentet ble ikke funnet." }
        '409': { description: "Det nye navnet er allerede i bruk." }

  /graph:
    get:
      tags: [Dokumenthåndtering]
      summary: Hent graf-data for et arkiv
      description: Returnerer alle dokumenter (noder) og lenker mellom dem (kanter).
      parameters:
        - name: Archive
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: "Noder og kanter for arkivet."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Graph'
        '401': { description: "Ugyldig token." }
        '403': { description: "Mangler leserettigheter til arkivet." }